package com.example.orderservice.service;

import com.example.orderservice.response.parcel.ParcelResponse;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.time.LocalDateTime;

@Service
public class ParcelLabelService {

    public byte[] generateLabel(ParcelResponse parcel) throws Exception {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        Document document = new Document(PageSize.A4);
        PdfWriter writer = PdfWriter.getInstance(document, outputStream);
        document.open();

        Paragraph title = new Paragraph("Parcel Shipment Invoice", new Font(Font.FontFamily.HELVETICA, 20, Font.BOLD));
        title.setAlignment(Element.ALIGN_CENTER);
        title.setSpacingAfter(20);
        document.add(title);

        document.add(new Paragraph("QickShip Logistics Mock", new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD)));
        document.add(new Paragraph("www.qickship.ro | support@qickship.ro", new Font(Font.FontFamily.HELVETICA, 10)));

        Paragraph space = new Paragraph("\n");
        space.setSpacingAfter(15);
        document.add(space);

        PdfPTable table = new PdfPTable(2);
        table.setWidths(new float[]{1, 3});
        table.setWidthPercentage(100);

        Font labelFont = new Font(Font.FontFamily.HELVETICA, 11, Font.BOLD);
        PdfPCell labelCell = new PdfPCell(new Phrase("AWB", labelFont));
        labelCell.setBackgroundColor(BaseColor.LIGHT_GRAY);
        labelCell.setPadding(5);
        table.addCell(labelCell);
        table.addCell(parcel.getAwb());

        table.addCell(new PdfPCell(new Phrase("Size", labelFont)));
        table.addCell(parcel.getSize().toString());

        table.addCell(new PdfPCell(new Phrase("Weight", labelFont)));
        table.addCell(parcel.getWeight() + " kg");

        table.addCell(new PdfPCell(new Phrase("Fragile", labelFont)));
        table.addCell(parcel.isFragile() ? "Yes" : "No");

        table.addCell(new PdfPCell(new Phrase("Price", labelFont)));
        table.addCell(String.format("%.2f $", parcel.getPrice()));

        table.addCell(new PdfPCell(new Phrase("Destination", labelFont)));
        table.addCell(parcel.getDestinationAddress());

        table.addCell(new PdfPCell(new Phrase("Receiver", labelFont)));
        table.addCell(parcel.getDestinationContact());

        table.addCell(new PdfPCell(new Phrase("Phone", labelFont)));
        table.addCell(parcel.getDestinationPhone());

        table.addCell(new PdfPCell(new Phrase("Receiver Email", labelFont)));
        table.addCell(parcel.getDestinationEmail());

        table.addCell(new PdfPCell(new Phrase("Sender Email", labelFont)));
        table.addCell(parcel.getEmail());

        document.add(table);

        Image qrCodeImage = Image.getInstance(generateQRCode(parcel.getAwb()));
        qrCodeImage.scaleToFit(100, 100);
        qrCodeImage.setAlignment(Image.ALIGN_RIGHT);
        document.add(new Paragraph("Scan for tracking", new Font(Font.FontFamily.HELVETICA, 10)));
        document.add(qrCodeImage);

        document.add(new Paragraph("\nGenerated by QickShip â€¢ " + LocalDateTime.now(), new Font(Font.FontFamily.HELVETICA, 8)));
        document.add(new Paragraph("\n"));

        document.close();

        return outputStream.toByteArray();
    }

    private byte[] generateQRCode(String data) throws Exception {
        int width = 200;
        int height = 200;
        BitMatrix matrix = new MultiFormatWriter()
                .encode(data, BarcodeFormat.QR_CODE, width, height);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        MatrixToImageWriter.writeToStream(matrix, "PNG", baos);
        return baos.toByteArray();
    }
}
